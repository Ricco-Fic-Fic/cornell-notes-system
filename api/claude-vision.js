export default async function handler(req, res) {
  // Headers CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©thode non autoris√©e' });
  }
  
  try {
    console.log('üöÄ [DEBUG] D√©but fonction claude-vision');
    
    // V√©rifier la cl√© API
    if (!process.env.ANTHROPIC_API_KEY) {
      console.log('‚ùå [DEBUG] Pas de cl√© API');
      return res.status(500).json({ error: 'Cl√© API manquante' });
    }
    
    console.log('‚úÖ [DEBUG] Cl√© API pr√©sente');
    
    // V√©rifier le body
    if (!req.body) {
      console.log('‚ùå [DEBUG] Pas de body');
      return res.status(400).json({ error: 'Pas de donn√©es' });
    }
    
    console.log('‚úÖ [DEBUG] Body re√ßu');
    
    const { imageData, fileName } = req.body;
    
    if (!imageData) {
      console.log('‚ùå [DEBUG] Pas d\'imageData');
      return res.status(400).json({ error: 'Pas d\'image' });
    }
    
    console.log('‚úÖ [DEBUG] Image data pr√©sente, taille:', imageData.length);
    
    // TEST SIMPLE - juste retourner des donn√©es factices pour voir si √ßa marche
    console.log('‚úÖ [DEBUG] Test r√©ussi - retour donn√©es factices');
    
    return res.status(200).json({
      subject: "Physique",
      chapter: "Test OCR Debug",
      professor: "Prof Test",
      mots_cles: "test, debug, ocr",
      formules: "E=mc¬≤",
      noms_auteurs: "Einstein",
      dates_importantes: "1905",
      notes_principales: "Test d'analyse OCR - fonction op√©rationnelle",
      resume_personnel: "La fonction OCR fonctionne correctement",
      confidence: 95
    });
    
  } catch (error) {
    console.log('‚ùå [DEBUG] Erreur:', error.message);
    console.log('‚ùå [DEBUG] Stack:', error.stack);
    return res.status(500).json({ 
      error: "Erreur debug", 
      details: error.message,
      stack: error.stack
    });
  }
}
